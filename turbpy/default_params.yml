# Default parameter values and parameterizations

# ------------------------------------------------------------------------------
# The stability correction method to use. The possible options are displayed
# below. If monin_obukhov, turbpy searches for parameter values to run the
# method. Default is standard.
stability_method: 'standard'
# Methods available within turbpy
available_stab_methods:
    - 'standard'
    - 'louis'
    - 'mahrt'
    - 'monin_obukhov'
# Determine if/which MO capping behavior is used.
capping: no_capping
available_capping:
    - no_capping
    # Capping as implemented in CROCUS and described
    # by Martin and Lejuene (1998)
    - louis_Ri_capping
    # Available options for monin-obukhov
    # Apply the windless exchange as implemented in SNTHERM
    - windless_exchange
    # The NoahMP approach (caps L at a value of 1)
    - obukhov_length_capping
    # The CLMv4.5 approach (caps zeta at a value of 2)
    - zeta_capping
    # No capping (implement as in theory)
    - no_capping
    # Minimum wind speed of 1 m/s. This is the default behavior of
    # the webb_noahmp gradient function.
    - minimum_wind

# ------------------------------------------------------------------------------
stability_params:
    # critical value for the bulk Richardson number (-)
    standard: 0.2
    # parameter in Louis (1979) stability function. This value is
    # divided by two to convert from b to b`.
    louis: 9.4
    # exponential scaling factor in the Mahrt (1987) stability function
    mahrt: 1.
    # Inverse of the critical Richardson number (for MO Webb scheme).
    # This is the alpha value. Note, that it is formulated identical
    # to the standard scheme
    webb: 5
    marks_dozier: 5.2

# ------------------------------------------------------------------------------
# Parameters specifying how to run the MO scheme.
monin_obukhov:
    # Select how the stability correciton is parameterized for the
    # Monin-Obukhov approach. The options are displayed below.
    gradient_function: 'holtslag_debruin'
    roughness_function: 'yang_08'
    conductance_approx: 'full'

    # Methods available within turbpy
    available_gradient_funcs:
        - 'holtslag_debruin'
        - 'webb'
        - 'beljaar_holtslag'
        - 'webb_noahmp'
        - 'webb_clmv45'
        - 'cheng_brutsaert'
        - 'marks_dozier'
    available_capping:
        # Apply the windless exchange as implemented in SNTHERM
        - 'windless_exchange'
        # The NoahMP and CLMv4.5 approach (caps L at a value of 1)
        - 'zeta_capping'
        # No capping (implement as in theory)
        - 'no_capping'
        # Minimum wind speed (1 m/s, from CLMv4.5)
        - 'minimum_wind'
    available_roughness_funcs:
        # Use a constant z0 value
        - 'constant_z0'
        # Use the Andreas 1987 parameterization (only for very smooth surfaces)
        - 'andreas'
        # Yang 08 (as used in WRF-Noah)
        - yang_08
    available_cond_funcs:
        # Use the full expressions for conductance (include the Psi(z0/L))
        - 'full'
        # Approximate conductance without the z0 modification
        - 'approximate'
